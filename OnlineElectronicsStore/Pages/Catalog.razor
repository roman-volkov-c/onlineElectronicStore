@page "/каталог/{groupofproducts?}/{product?}"
@inject SearchService SearchService
@implements IDisposable


@if (Product is not null && currentProduct is null || cards is null)
{
    <NotFound />
}
else if (currentProduct is null)
{
    <div class="row row-cols-1 row-cols-lg-2 row-cols-xxl-3 g-3 text-center align-items-center">
        @foreach (ProductCard card in cards)
        {
            <div class="col">
                <div class="card">
                    <a href="@("каталог/" + (currentGroupOfProducts is null ? null : $"{currentGroupOfProducts.Name}/") + card.Name)">
                        <div class="card-img-wrapper">
                            <img src="@card.PathToImage" class="card-img-top" />
                        </div>
                    </a>
                    <div class="card-body">
                        <h5 class="card-title">@card.Name</h5>
                        <p class="card-text">@card.Description</p>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    @* TODO: Отобразить страницу товара *@
}

@code {
    [Parameter]
    public string? GroupOfProducts { get; set; }
    [Parameter]
    public string? Product { get; set; }

    private ProductCard[]? cards;
    private GroupOfProducts? currentGroupOfProducts;
    private GroupOfProducts.Product? currentProduct;

    public void Dispose()
    {
        NavMenuRedirectBar.AllowedValues = Array.Empty<string>();
        NavMenuRedirectBar.RequestRerenderOfNavMenu();
    }
    protected override void OnParametersSet()
    {
        GroupOfProducts[] groupsOfProducts = SearchService.GroupsOfItems;
        currentGroupOfProducts = groupsOfProducts.SingleOrDefault(x => x.Name == GroupOfProducts);
        currentProduct = currentGroupOfProducts?.Products.SingleOrDefault(x => x.Name == Product);
        cards = GroupOfProducts is null ? groupsOfProducts : currentGroupOfProducts?.Products;

        NavMenuRedirectBar.AllowedValues = currentProduct is null && cards is not null ? cards.Select(x => x.Name).ToArray() : Array.Empty<string>();
        NavMenuRedirectBar.RequestRerenderOfNavMenu();
    }
}
